# Install libraries
--------------------------------------

npm i bootstrap
npm i @fortawesome/fontawesome-free
npm i ngx-toastr
npm i ngx-bootstrap
npm i bootstrap-icons
npm i ngx-pagination
npm i js-sha512
npm i @popperjs/core

# Copy the images to the assets folder Route: src/assets
--------------------------------------

# Include the libraries into Angular.json where build is located, exactly scripts and styles.
  Here you have the code.
--------------------------------------
"styles": [
        "src/styles.css",
        "node_modules/bootstrap/dist/css/bootstrap.min.css",
        "node_modules/bootstrap-icons/font/bootstrap-icons.css",
        "node_modules/@fortawesome/fontawesome-free/css/all.min.css",
        "node_modules/ngx-toastr/toastr.css"
    ],
"scripts": [
        "node_modules/bootstrap/dist/js/bootstrap.min.js",
        "node_modules/bootstrap/dist/js/bootstrap.bundle.min.js",
        "node_modules/@popperjs/core/dist/umd/popper.min.js"
    ]


# Set ports on angular.json
------------------------------------
production port: 8090
development port: 8089

# Setup the app.module.ts file con src/app/app.module.ts
------------------------------------

Import libraries

import { ToastrModule } from 'ngx-toastr';
import { FormsModule } from '@angular/forms';
import { NgxPaginationModule } from 'ngx-pagination';
import { ModalModule } from 'ngx-bootstrap/modal';
import { BrowserAnimationsModule } from '@angular/platform-browser/animations';

imports to use on angular

imports: [
    BrowserModule,
    AppRoutingModule,
    FormsModule,
    ModalModule.forRoot(), // use on all application without problems .forRoot()
    ToastrModule.forRoot(),
    BrowserAnimationsModule,
    NgxPaginationModule
  ],


# Create modules
----------------------------------

ng g m modules/container

ng g c modules/container/land/cabeceraLand
ng g c modules/container/land/contenedorLand

ng g c modules/container/dash/cabeceraDash
ng g c modules/container/dash/contenedorDash

ng g m modules/public
ng g m modules/public/publico-routing --flat --module=public

-> Componentes internos, pÃºblicos y van a manejar ruteo

ng g c modules/public/error
ng g c modules/public/menu
ng g c modules/public/restaurante
ng g c modules/public/evento
ng g c modules/public/inicio
ng g c modules/public/acerca
ng g c modules/public/acceso
ng g c modules/public/ciudad

-> Componentes internos, privados y van a manejar ruteo


ng g m modules/private/role
ng g m modules/private/role/role-routing --flat --module=role

ng g c modules/private/role/roleCrear
ng g c modules/private/role/roleEditar
ng g c modules/private/role/roleAdmin



ng g m modules/private/usuario
ng g m modules/private/usuario/usuario-routing --flat --module=usuario

ng g c modules/private/usuario/usuarioCrear
ng g c modules/private/usuario/usuarioEditar
ng g c modules/private/usuario/usuarioAdmin


ng g m modules/private/restaurante
ng g m modules/private/restaurante/restaurante-routing --flat --module=restaurante

ng g c modules/private/restaurante/restauranteCrear
ng g c modules/private/restaurante/restauranteEditar
ng g c modules/private/restaurante/restauranteAdmin



ng g m modules/private/control
ng g m modules/private/control/control-routing --flat --module=control

ng g c modules/private/control/errorInterno
ng g c modules/private/control/inicioInterno

# Create utilities
----------------------------------------------------------------

ng g enum utilities/mensajes/toast --type=func
ng g enum utilities/routes/dashRutas
ng g enum utilities/routes/landRutas

# Copy the toastr message 
----------------------------------------------------------------

# Copy the styles
----------------------------------------------------------------


# Setup start template src/app/app.component.html
----------------------------------------------------------------

<router-outlet></router-outlet>

# Setup the container modules/container/container.module.ts
----------------------------------------------------------------

import { RouterModule } from '@angular/router';

imports: [CommonModule, RouterModule],
exports: [CabeceraLandComponent, ContenedorLandComponent],

# Configure the module src/app/app.module.ts
----------------------------------------------------------------

import { ContainerModule } from './modules/container/container.module';

imports : [ContainerModule]

# Configure the container routing src\app\modules\container\land\contenedor-land\contenedor-land.component.html
----------------------------------------------------------------

<router-outlet></router-outlet>

Load all the hipervincules in the container land

#  Basic routing -> src\app\modules\public\publico-routing.module.ts
----------------------------------------------------------------

const routes: Routes = [
  //End points
  { path: 'home', component: InicioComponent },
  { path: 'city', component: CiudadComponent },
  { path: 'restaurant', component: RestauranteComponent },
  { path: 'menu', component: MenuComponent },
  { path: 'event', component: EventoComponent },
  { path: 'login', component: AccesoComponent },
  { path: 'about', component: AcercaComponent },

  { path: '', redirectTo: 'home', pathMatch: 'full' },
  { path: '**', component: ErrorComponent },
];


imports: [CommonModule, RouterModule.forChild(routes)],
exports: [RouterModule]

# Configure the public module src\app\modules\public\public.module.ts
----------------------------------------------------------------

imports: [
    CommonModule,
    PublicoRoutingModule,

    FormsModule, // <-
    ToastrModule.forRoot(), // <-
    ContainerModule // <-
  ],

# Father routes must be included -> src\app\utilities\routes\land-rutas.ts
----------------------------------------------------------------

import { Routes } from '@angular/router';

export const LANDSCAPE_ROUTES: Routes = [
  {
    path: 'land',
    loadChildren: () =>
      import('../../modules/public/public.module').then(
        (module) => module.PublicModule
      ),
  },
  {
    path: '',
    redirectTo: 'land',
    pathMatch: 'full',
  },
];


# Final routing src\app\app-routing.module.ts
----------------------------------------------------------------

const routes: Routes = [
  {
    path: '',
    component: ContenedorLandComponent,
    children: LANDSCAPE_ROUTES,
  },
  {
    path: '**',
    component: ErrorComponent,
  },
];

# Copy templates from resources folder.
----------------------------------------------------------------


# Allow Http on angular on C:\Angular\corralito\src\app\app.module.ts (app.module.ts)
----------------------------------------------------------------


import { HttpClientModule } from '@angular/common/http';

Put HttpClientModule on imports



-> Create the observers on utilities. Craete a folder on utilities and tipo-any.ts inside the folder. 
----------------------------------------------------------------

import { Observer } from 'rxjs';

export const observadorAny: Observer<any> = {
  next(res) {
    console.log(res);
  },
  error(err) {
    console.log(err);
  },
  complete() {
    console.log('complete');
  },
};


-> Set up the end points 
-> Create a domains folder inside utilities folder
-> Create a file called uris.ts
----------------------------------------------------------------

// Connect to the backend server

export const API_URL = 'http://localhost:3200/';

// Public services

export const API_CITY = API_URL + 'api/public/city';
export const API_RESTAURANT = API_URL + 'api/public/restaurant';
export const API_PRODUCT = API_URL + 'api/public/product';

// Private services

-> Create city model
----------------------------------------------------------------

ng g class modelos/ciudad --skip-tests=true


-> Create the first service 
----------------------------------------------------------------

ng g s servicios/ciudad --skip-tests=true

-> Inside the ciudad.service.ts import...
...
import { Observable } from 'rxjs';
import { Ciudad } from '../modelos/Ciudad';
import { HttpClient } from '@angular/common/http';
import * as miUrl from '../utilities/domains/uris';

--> Inside the class

constructor(private http: HttpClient) {}

public apiCiudad: string = miUrl.API_CITY;
  
public obtenerCiudades(): Observable<Ciudad[]> {
    return this.http.get<Ciudad[]>(this.apiCiudad + '/all');
}


-> Configure the Ciudad Component to use the ciudad service
----------------------------------------------------------------

Imports...
...

export class CiudadComponent implements OnInit, OnDestroy {
  public tmp: any;
  public cargaFinalizada: boolean;
  public arregloCiudades: Ciudad[];
  public subscripcion: Subscription;

  constructor(private ciudadService: CiudadService) {
    this.cargaFinalizada = false;
    this.arregloCiudades = [];
    this.subscripcion = this.tmp;
  }

  ngOnInit(): void {
    this.obtenerCiudadesBack();
  }

  ngOnDestroy(): void {
    if (this.subscripcion) {
      this.subscripcion.unsubscribe();
    }
  }

  public obtenerCiudadesBack(): void {
    this.subscripcion = this.ciudadService
      .obtenerCiudades()
      .pipe(
        map((respuesta: any) => {
          console.log(respuesta);
          this.arregloCiudades = respuesta;
        }),
        finalize(() => {
          this.cargaFinalizada = true;
        })
      )
      .subscribe(observadorAny);
  }
}

-> On ciudad component html
----------------------------------------------------------------

 <div class="row g-0" *ngIf="cargaFinalizada; else Spinner">
        <div class="col-lg-3 col-md-4" *ngFor="let obj of arregloCiudades">
          <div class="gallery-item">
            <a class="gallery-lightbox">
              <img
                [src]="'data:image/png;base64,' + obj.base64Ciudad"
                alt="xd"
                class="img-fluid"
                style="
                  height: 240px;
                  width: auto;
                  display: block;
                  margin-left: auto;
                  margin-right: auto;
                "
              />
            </a>
          </div>
        </div>
      </div>

<!-- Template Inicio -->

<ng-template #Spinner>
  <div class="col-md text-center">
    <div class="spinner-grow text-warning" role="status">
      <span class="visually-hidden">Loading...</span>
    </div>
  </div>
</ng-template>

<!-- Template Fin -->


-> Create restaurant model
----------------------------------------------------------------

ng g class modelos/restaurant --skip-tests=true


-> Create the restaurant service
----------------------------------------------------------------

ng g s servicios/restaurant --skip-tests=true


inside the service...
...
constructor(private http: HttpClient) {}

  public api: string = url.API_CITY;

  public getRestaurants(): Observable<Restaurante[]> {
    return this.http.get<Restaurante[]>(this.api + '/all');
  }


-> Configure the Restaurante Component to use the restaurante service
----------------------------------------------------------------


-> Configure the Login template component
----------------------------------------------------------------

-> Add the new end point from backend on utilities -> domains -> uris.ts
----------------------------------------------------------------

export const API_INICIOSESION = API_URL + 'api/public/access';

-> Create the models
----------------------------------------------------------------

ng g class modelos/InicioSesion --skip-tests
ng g class modelos/RespuestaInicioSesion --skip-tests

-> Configure the InicioSesion Model 
----------------------------------------------------------------

export class InicioSesion {
  public nombreUsuario: string;
  public clave: string;

  constructor(nom: string, cla: string) {
    this.nombreUsuario = nom;
    this.clave = cla;
  }
}


-> Configure the RespuestaInicioSesion model
----------------------------------------------------------------

export class RespuestaInicioSesion {
  public token: string;
  public fotoUsta: string;

  constructor(tok: string, fot: string) {
    this.token = tok;
    this.fotoUsta = fot;
  }
}


-> Create service to iniciarSesion
----------------------------------------------------------------

ng g s servicios/iniciarSesion --skip-tests=true


-> Configure the acceso.Component
----------------------------------------------------------------
 constructor(
private router: Router,
    public accesoServicio: IniciarSesionService,
    public toastr: ToastrService
  ) {
    this.obj = new InicioSesion('', '');
    this.sub = this.tmp;
  }

  public operation(form: NgForm): void {
    const hash = sha512.sha512(this.obj.clave);
    const email = this.obj.nombreUsuario;
    const aObj = new InicioSesion(email, hash);

    this.sub = this.accesoServicio
      .iniciarSesion(aObj)
      .pipe(
        map((result: RespuestaInicioSesion) => {
          localStorage.setItem('token', result.token);
          localStorage.setItem('foto', result.fotoUsta)
          this.router.navigate(['/private/home']);
          form.reset()
          
        }),
        catchError((err) => {
          mostrarMensaje('error', 'FallÃ³ ja!', 'Error', this.toastr);
          form.reset();
          throw err;
        })
      )
      .subscribe(observadorAny);
  }

  ngOnDestroy(): void {
    if (this.sub) {
      this.sub.unsubscribe();
    }
  }

  ngOnInit(): void {}



->  Configure the html form
----------------------------------------------------------------
<form
                  #frmLogin="ngForm"
                  class="col-md-10"
                  (submit)="frmLogin.form.valid && operation(frmLogin)"
                  novalidate
                >
                  <div class="form-outline mb-2">
                    <input
                      type="email"
                      id="user"
                      name="user"
                      class="form-control"
                      placeholder="Correo electrÃ³nico y/o Usuario"
                      #user = "ngModel"
                      [(ngModel)] = "obj.nombreUsuario"
                      [ngClass]="{'is-valid': frmLogin.submitted && user.invalid}"
                      required
                    />
                    <label class="form-label" for="user"
                      >Usuario:</label
                    >
                  </div>

                  <div class="form-outline mb-2">
                    <input
                      type="password"
                      id="password"
                      name="password"
                      class="form-control"
                      placeholder="ContraseÃ±a"
                      #password = "ngModel"
                      [(ngModel)]="obj.clave"
                      [ngClass]="{'is-valid': frmLogin.submitted && password.invalid}"
                      required
                    />
                    <label class="form-label" for="password"
                      >ContraseÃ±a:</label
                    >
                  </div>

                  <div class="text-center pt-1 mb-5 pb-1">
                    <div class="d-grid gap-2">
                      <button
                        class="btn btn-primary gradient-custom-2"
                        type="submit"
                      >
                        Iniciar sesiÃ³n
                      </button>
                    </div>
                    <a href="">Â¿Olvidastes la contraseÃ±a?</a>
                  </div>

                  <div
                    class="d-flex align-items-center justify-content-center pb-4"
                  >
                    <p class="mb-0 me-2">Â¿No tienes cuenta?</p>
                    <button type="button" class="btn btn-outline-danger">
                      Crear cuenta
                    </button>
                  </div>
                </form>





######## Taller Miercoles #########

-> Create a user model 
----------------------------------------------------------------

ng g class modelos/CrearUsuario --skip-tests

nom, apell, correo, clave, reclave


-> Create a service to create a new user 
----------------------------------------------------------------

ng g s servicios/CrearUsuario --skip-tests=true

-> Create a new model called registro

ng g c modules/public/registro




